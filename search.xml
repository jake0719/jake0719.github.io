<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu 16.04 升级Openssh 8.8P1</title>
    <url>/2021/11/24/UBUNTU-16-04-%E5%8D%87%E7%BA%A7OPENSSH-8-8P1/</url>
    <content><![CDATA[<p>因为受到监管报告，服务器有SSL/TLS协议信息泄露漏洞(CVE-2016-2183)漏洞，我们的几台ubuntu服务器要升级ssl和openssh。查了下最新的openssh版本已经8.8了，网上大部分升级教程都是低版本的ssh，还是直接升级到最新的。</p>
<p>先容我吐槽下。这两年伟大的ZF在网络监管方面越来越严格，同时也意味着一般企业公司在信息安全方面支出也越来越高。做个公安部的安保等级每年要花费近十万大洋，做个通信管理局的通保每年也要花费不少。对于IT创业公司来说，真的太难了。</p>
<p><strong>安装环境</strong></p>
<ul>
<li>Ubuntu 16.04</li>
<li>内核版本 : Linux 4.4.0-170-generic</li>
<li>Shell： zsh 5.1.1 (x86_64-ubuntu-linux-gnu)</li>
<li>openssl版本： OpenSSL 1.0.2g  1 Mar 2016</li>
<li>openssh版本： OpenSSH_7.2p2 Ubuntu-4ubuntu2.10</li>
</ul>
<p>因为要升级ssh，ssh进程要停掉，所以要先安装telnet来连接服务器。</p>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="安装telnet"><a href="#安装telnet" class="headerlink" title="安装telnet"></a>安装telnet</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install openbsd-inetd telnetd telnet</span><br><span class="line">/etc/init.d/openbsd-inetd restart     # 启动服务</span><br><span class="line">netstat -anpt|grep 23                 # 查看telnet服务的默认端口是否启动</span><br><span class="line">telnet localhost &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  # 测试登录</span><br></pre></td></tr></tbody></table></figure>

<h3 id="下载需要的包"><a href="#下载需要的包" class="headerlink" title="下载需要的包"></a>下载需要的包</h3><p>服务器上找个目录存放这次升级要下载的包，进入该目录依次下载3个压缩包。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">wget http://zlib.net/zlib-1.2.11.tar.gz   </span><br><span class="line">wget --no-check-certificate https://www.openssl.org/source/openssl-1.1.1l.tar.gz </span><br><span class="line">wget --no-check-certificate https://fastly.cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-8.8p1.tar.gz</span><br></pre></td></tr></tbody></table></figure>

<h2 id="升级更新"><a href="#升级更新" class="headerlink" title="升级更新"></a>升级更新</h2><h3 id="安装依赖包zlib"><a href="#安装依赖包zlib" class="headerlink" title="安装依赖包zlib"></a>安装依赖包zlib</h3><p><em><strong>退出ssh登录，以telnet方式进入服务器，进入之前下载包的目录</strong></em></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">tar xvf zlib-1.2.11.tar.gz</span><br><span class="line">cd zlib-1.2.11</span><br><span class="line">./configure --prefix=/usr/local/zlib</span><br><span class="line">make -j 8</span><br><span class="line">sudo make install #非root账号执行这条命令要sudo权限</span><br></pre></td></tr></tbody></table></figure>
<p>如果运行“./configure –prefix=/usr/local/zlib” 出现错误，请检查gcc</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">检测是否安装</span></span><br><span class="line">cc -v</span><br><span class="line"><span class="meta">#</span><span class="bash">安装</span></span><br><span class="line">sudo apt-get install gcc</span><br></pre></td></tr></tbody></table></figure>

<h3 id="升级更新openssl版本"><a href="#升级更新openssl版本" class="headerlink" title="升级更新openssl版本"></a>升级更新openssl版本</h3><p>回到下载包的目录，依次执行以下命令</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">tar zxvf openssl-1.1.1l.tar.gz</span><br><span class="line">cd openssl-1.1.1l</span><br><span class="line">./config shared zlib</span><br><span class="line">make -j 8</span><br><span class="line">sudo make install</span><br></pre></td></tr></tbody></table></figure>

<p>备份原来的openssl,创建软链接到系统位置</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo mv /usr/bin/openssl /usr/bin/openssl.bak </span><br><span class="line">sudo mv /usr/include/openssl /usr/include/openssl.bak </span><br><span class="line">sudo ln -s /usr/local/bin/openssl /usr/bin/openssl</span><br><span class="line">sudo ln -s /usr/local/include/openssl /usr/include/openssl</span><br></pre></td></tr></tbody></table></figure>

<p>添加openssl的lib库到系统并使用。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo echo "/usr/local/lib" &gt; /etc/ld.so.conf.d/openssl.conf</span><br><span class="line">ldconfig </span><br><span class="line"><span class="meta">#</span><span class="bash">ldconfig是一个动态链接库管理命令，其目的为了让动态链接库为系统所共享。 ldconfig的主要用途： 默认搜寻/lilb和/usr/lib，以及配置文件/etc/ld.so.conf内所列的目录下的库文件。</span></span><br></pre></td></tr></tbody></table></figure>

<p>如果这里因为非root账号修改系统文件权限不够出现以下类似错误：</p>
<blockquote>
<p>zsh: permission denied: /etc/ld.so.conf.d/openssl.conf</p>
</blockquote>
<p>请这样执行命令：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo sh -c 'echo "/usr/local/lib" &gt; /etc/ld.so.conf.d/openssl.conf'</span><br></pre></td></tr></tbody></table></figure>

<p>查看新的openssl版本：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">openssl version -a</span><br><span class="line"><span class="meta">#</span><span class="bash">更新完成显示：OpenSSL 1.1.1l  24 Aug 2021</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="更新-openssh"><a href="#更新-openssh" class="headerlink" title="更新 openssh"></a>更新 openssh</h3><p>备份原openssh文件,卸载原openssh</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo mv /etc/init.d/ssh /etc/init.d/ssh.old</span><br><span class="line">sudo mv /etc/ssh /etc/ssh.old</span><br><span class="line">sudo apt-get remove openssh-server openssh-client -y</span><br></pre></td></tr></tbody></table></figure>

<p>如果卸载openssh-server报错，请检查：</p>
<ol>
<li>ssh所有进程是否停止，kill掉所有的ssh进程</li>
</ol>
 <figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">检查ssh进程pid，然后删除</span></span><br><span class="line">ps -ef |grep ssh</span><br><span class="line">kill -9 #pid#</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>如果/etc/rc6.d下有/etc/init.d/ssh系统启动文件的软连接，请删除。</li>
</ul>
<p>回到下载包的目录，依次执行以下命令</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装依赖包libpam0g-dev</span></span><br><span class="line">sudo apt-get install libpam0g-dev -y</span><br><span class="line">tar zxvf openssh-8.8p1.tar.gz</span><br><span class="line">cd openssh-8.8p1</span><br><span class="line">./configure --prefix=/usr \</span><br><span class="line">--sysconfdir=/etc/ssh \</span><br><span class="line">--with-md5-passwords \</span><br><span class="line">--with-pam --with-zlib \</span><br><span class="line">--with-ssl-dir=/usr/local \</span><br><span class="line">--with-privsep-path=/var/lib/sshd </span><br><span class="line">make -j 8</span><br><span class="line">sudo make install </span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">检查新的ssh版本</span></span><br><span class="line">ssh -V</span><br><span class="line"><span class="meta">#</span><span class="bash">显示OpenSSH_8.8p1, OpenSSL 1.1.1l  24 Aug 2021</span></span><br></pre></td></tr></tbody></table></figure>

<p>完成更新，再恢复原来备份的文件。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cd /etc/ssh</span><br><span class="line">sudo mv sshd_config sshd_config.default</span><br><span class="line">sudo cp ../ssh.old/sshd_config ./</span><br><span class="line">sudo mv /etc/init.d/ssh.old /etc/init.d/ssh</span><br><span class="line">sudo systemctl unmask ssh</span><br><span class="line">sudo systemctl restart ssh</span><br></pre></td></tr></tbody></table></figure>

<p>启动后可以再次用前面的ps命令检查下sshd进程是否启动；如果原来的sshd_config配置中包含了新版本不支持已经被废弃的参数，ssh启动会失败，启动日志里会提示哪些问题，可以参照问题去修改。<br>比如RSAAuthentication、KeyRegenerationInterval这些参数都已经被新版本废弃了，还有原来配置加密算法的参数Ciphers也可能导致启动失败，注释掉这些重新配置就可以了。</p>
<p>更新好ssh版本，会影响原先所有连接过的客户端。原先连接过的客户端重新连接会报错，提示.ssh/known_hosts文件里的老的某一行连接有问题，删除出错的那一行，然后重新建立新的ssh连接就好了。这是因为ssh升级，老的公钥失效了。</p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>鲲鹏aarch64架构的centos7 安装mysql</title>
    <url>/2021/11/21/%E9%B2%B2%E9%B9%8Fcentos7-%E5%AE%89%E8%A3%85mysql/</url>
    <content><![CDATA[<p>之前使用阿里云linux服务器安装mysql没碰到什么问题，最近在鲲鹏服务器的CentOs7系统里尝试着安装mysql，结果碰到各种问题。终于零距离初步接触了解了下鲲鹏服务器的与众不同。</p>
<p>先简单认识下<em><strong>鲲鹏服务器</strong></em>。</p>
<p><em><strong>鲲鹏</strong></em>原指华为海思在2019年1月初发布的一款兼容ARM指令集的服务器芯片鲲鹏920，性能强悍，配备了64个物理核心，单核实力从CPU算力benchmark的角度对比，大约持平于同期X86的主流服务器芯片，整体多核多线程算力较同期的X86芯片更强大。</p>
<p>当初看到服务器的配置，也惊讶了一嘴，64核的CPU，228G内存，看价格就知道配置多豪华了。</p>
<p><img src="/images/pasted-20.png" alt="upload successful"></p>
<p>性能放一边，回过头来继续看服务器的运维体验。</p>
<p>拿到服务器整好基础环境后，开始安装本地mysql数据库，因为一直用mysql5.7，很稳定没啥问题，暂时不打算升级到mysql新版本8.0。</p>
<p>安装环境：</p>
<ul>
<li>CentOs 7.9 </li>
<li>服务器CPU内核版本 : 4.18.0-305.10.2.el7.aarch64</li>
<li>Shell： Zsh 5.0.2 (aarch64-redhat-linux-gnu)</li>
</ul>
<p>linux上安装mysql一般有两种方式：rpm安装和源码安装。<br>先试了rpm安装方式，结果安装到最后发生404错误，以下链接404：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">http://repo.mysql.com/yum/mysql-5.7-community/el/7/aarch64/repodata/repomd.xml: [Errno 14] HTTP Error 404 - Not Found</span><br></pre></td></tr></tbody></table></figure>
<p>错误信息如图：</p>
<p><img src="/images/pasted-21.png" alt="upload successful"></p>
<p>尝试解决这个问题都不行，最后发现这个是因为cpu内核不同导致的。 鲲鹏CPU使用的是arm指令集架构，与以前Intel和AMD的CPU的x86架构不同，前者是精简指令集运算（Reduced Instruction Set Computing，RISC），后者是复杂指令集运算（Complex Instruction Set Computing，CISC）。arm一般是用在移动通讯设备上的，华为搞这块起家的，现在老美打压华为，芯片管控，想想也能理解。</p>
<p>网上有人也碰到类似问题，用mysql源码和boost库重新编译安装成功的。于是，下载mysql源码包和boost库源码包重新cmake编译安装，但是我试了几次，mysql5.7和boost1.59一起cmake就出错，后来换成mysql5.6重新cmake，编译安装成功后，启动始终有错误，试了各种办法都无法成功启动mysql。后来看到mysql自己也提供了含boost的源码包，于是也下载下来安装，但是编译失败，出现了之前一样的错误。</p>
<p>有兴趣的朋友可以尝试华为提供的方法 <a href="https://support.huaweicloud.com/prtg-kunpengdbs/kunpengmysql5727_02_0008.html">“鲲鹏服务器Boostkit套件编译安装”</a></p>
<p>看来，鲲鹏的arm架构兼容mysql还是有问题。后来再次搜索，忽然发现华为提供了基于aarch64架构的mysql安装包rpm，版本是mysql5.7.27。<br>安装过程如下：</p>
<p><em><strong>配置本地yum源</strong></em></p>
<p>备份原yum库文件并将鲲鹏源的新配置写入repo文件。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">备份原库文件夹 #mv /etc/yum.repos.d/ /etc/yum.repos.d-bak</span><br><span class="line">重新创建库目录 #Mkdir /etc/yum.repos.d</span><br><span class="line">写入新的repo文件 #echo -e "[kunpeng]\nname=CentOS-kunpeng - Base - mirrors.huaweicloud.com\nbaseurl=https://mirrors.huaweicloud.com/kunpeng/yum/el/7/aarch64/\ngpgcheck=0\nenabled=1" &gt; /etc/yum.repos.d/CentOS-Base-kunpeng.repo</span><br></pre></td></tr></tbody></table></figure>

<p><em><strong>安装RPM包</strong></em></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">清除缓存。 #yum clean all</span><br><span class="line">创建缓存。 #yum makecache</span><br><span class="line">安装数据库rpm包。 #yum -y install mysql-5.7.27-1.el7.aarch64 --enablerepo=kunpeng</span><br></pre></td></tr></tbody></table></figure>
<p><img src="/images/pasted-22.png" alt="upload successful"></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">查看安装后的rpm包。 #rpm -qa | grep mysql</span><br><span class="line">如果/etc/my.cnf配置文件的组和用户不是mysql用户和组，要修改为mysql:mysql。 #chown mysql:mysql /etc/my.cnf</span><br></pre></td></tr></tbody></table></figure>
<p>检查my.cnf里配置的目录是否用户和组都是mysql，不是的话，都要修改好用户和组<br><img src="/images/pasted-23.png" alt="upload successful"></p>
<p>然后初始化mysql：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqld --defaults-file=/etc/my.cnf --initialize --basedir=/usr/local/mysql --datadir=/var/lib/mysql</span><br></pre></td></tr></tbody></table></figure>
<p>如果出现以下错误，需要额外安装些华为提供的lib文件：</p>
<blockquote>
<p>/usr/local/mysql/bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</p>
</blockquote>
<p><strong>采用镜像站RPM安装方式安装，需要额外做以下操作步骤避免初始化数据库失败。(华为官网说是安装前操作，我在安装后操作也没问题)</strong></p>
<ol>
<li>定位到服务器“/home”目录下，下载rpm-bug.zip。<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cd /home</span><br><span class="line">wget https://mirrors.huaweicloud.com/kunpeng/archive/kunpeng_solution/database/patch/rpm-bug.zip</span><br></pre></td></tr></tbody></table></figure></li>
<li>解压压缩包。 <figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">unzip rpm-bug.zip</span><br></pre></td></tr></tbody></table></figure></li>
<li>进入解压后的文件目录并将其中的文件放入到对应的库文件目录中（如果有是否重写文件等提示，则输入y然后回车）。<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cd rpm-bug</span><br><span class="line">cp libatomic.so.1 /usr/lib64/</span><br><span class="line">cp libstdc++.so.6.0.24 /lib64/</span><br><span class="line">rm /lib64/libstdc++.so.6</span><br><span class="line">ln -s /lib64/libstdc++.so.6.0.24 /lib64/libstdc++.so.6</span><br><span class="line">cp libaio.so.1.0.1 /usr/lib64/libaio.so.1</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<p>上述操作完成后再执行mysql初始化命令，完成初始化后，就可以启动mysql了,安装的时候在系统启动目录（/etc/init.d）下生成了mysql文件.<br>第一次需要手动启动mysql服务 </p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">/etc/init.d/mysql start</span></span><br></pre></td></tr></tbody></table></figure>
<p>后面不用再手动启动；服务器重启的话，mysql会自动启动。</p>
<p>初始化的时候，如果终端命令行里有回显log，可以在里面找到初始化的root密码；如果没有，可以在my.cnf配置文件里配置的错误日志文件里找到(如下图所示)；然后进入mysql，修改root密码。</p>
<p><img src="/images/pasted-24.png" alt="upload successful"></p>
<p>以上rpm安装信息部分也可以参考华为官方信息 <a href="https://support.huaweicloud.com/instg-kunpengdbs/kunpengmysql8017_03_0011.html">鲲鹏服务器mysql镜像站RPM安装</a></p>
]]></content>
      <tags>
        <tag>CentOs</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo同步内容到github Pages</title>
    <url>/2021/08/05/hexo-github/</url>
    <content><![CDATA[<h3 id="Hexo同步github-Pages"><a href="#Hexo同步github-Pages" class="headerlink" title="Hexo同步github Pages"></a>Hexo同步github Pages</h3><p>hexo下面的博客内容想要同步到github Pages下的操作流程如下。</p>
<h4 id="1-github-pages初始化"><a href="#1-github-pages初始化" class="headerlink" title="1.github pages初始化"></a>1.github pages初始化</h4><p>进入github登录后，右上角+符号里点击菜单新建一个仓库：</p>
<p><img src="/images/pasted-7.png" alt="upload successful"><br>上图中Repository name必须填写账号用户名，后面加上.github.io<br>然后勾选Add a Readme file。<br>确认新建仓库后进入仓库页面点击settings</p>
<p><img src="/images/pasted-8.png" alt="upload successful"></p>
<p>拉下页面下面Github Pages项， 点击check it out here！</p>
<p><img src="/images/pasted-9.png" alt="upload successful"></p>
<p>看到你的github个人博客页面已经生成。<br><img src="/images/pasted-11.png" alt="upload successful"><br>点击按钮Choose a theme选择一个博客样式主题，然后commit changes。再进入你的github博客网址[用户名].github.io，可以看到初始化的首页了。</p>
<p><img src="/images/pasted-12.png" alt="upload successful"></p>
<h4 id="2-Hexo配置"><a href="#2-Hexo配置" class="headerlink" title="2.Hexo配置"></a>2.Hexo配置</h4><p>在博客的根目录下创建一个文件夹admin_script 用于存放脚本，然后新建一个脚本，下上下面代码并保存，给脚本执行权限</p>
<p>        mkdir admin_script<br>        cd admin_script<br>        vi hexo-g.sh  #新建脚本<br>编辑hexo-g.sh脚本文件：</p>
<p>        hexo g &amp;&amp; hexo d  #hexo生成静态页面并发布的命令<br>然后增加脚本执行权限：</p>
<p>        chmod +x hexo-g.sh<br>        <br>然后在hexo主配置文件_config.yml的admin项里增加一条（如下图）：</p>
<pre><code>     deployCommand: ./admin_script/hexo-g.sh
</code></pre>
<p><img src="/images/pasted-15.png" alt="upload successful"></p>
<p>同时配置文件里的deployment项替换成下面所示：<br>    # Deployment<br>    ## Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a><br>    deploy:<br>      type: git<br>      repository: <a href="mailto:&#103;&#x69;&#116;&#x40;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;">&#103;&#x69;&#116;&#x40;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;</a>:用户名/用户名.github.io.git<br>      branch: main<br>branch分支我选择的是默认的main，有些人用master，看github里自己是怎样配置的。</p>
<h5 id="SSH连接github配置"><a href="#SSH连接github配置" class="headerlink" title="SSH连接github配置"></a>SSH连接github配置</h5><p>ubuntu服务器配置git账户，Name和Email是注册的github账号名字和邮箱</p>
<pre><code>     git config --global user.name &quot;Name&quot;
     git config --global user.email &quot;Email&quot;
     
</code></pre>
<p>博客系统下生成ssh公私钥，如果从来没生成过，就执行：</p>
<p>         ssh-keygen -t rsa -C “Email”<br>这样会在个人用户根目录下隐藏目录.ssh下生成公钥（id_rsa.pub）和私钥，将公钥内容拷贝下来.粘贴到github的ssh公钥配置里。<br>操作流程，打开github的配置页面settings：</p>
<p><img src="/images/pasted-16.png" alt="upload successful"></p>
<p>在上图中点击左边菜单SSH and GPG keys， 然后点击右边按钮New SSH key，将公钥内容粘贴到key的输入框中，title可以随意填。<br><img src="/images/pasted-17.png" alt="upload successful"></p>
<p>保存好，hexo服务器就可以同步用git同步内容到github了。hexo-admin中新增文章，然后点击deploy菜单，输入提交message，点击deploy部署按钮，就可以同步到github了。下图是我同步第一篇文章的日志。<br><img src="/images/pasted-14.png" alt="upload successful"></p>
<p>部署好后，打开我的github Pages主页，就可以看到我的hexo博客和github Pages已经内容一致了。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的个人博客系统搭建</title>
    <url>/2021/08/04/Hexo-github%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>作为一个资深的软件工程师，不自个儿玩下个人博客说不过去。刚好多年来一直有一台翻墙云服务器空着不利用下太浪费了。乘着闲情逸致，在自己的云服务器上搭建了一个博客系统玩下。</p>
<p>云服务器系统是ubuntu 18。<br>简单比较了几款开源免费的博客系统，基于java的系统太复杂，其他的一些CMS系统太大功能太多，人生苦短时间太宝贵，当然要选一个最简洁，部署相对方便的。当然前提是要熟悉linux系统操作。最后选了Hexo，一款相对来说比较主流的轻博客系统。</p>
<h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p>Hexo可以同步内容到目前主流的git网站，比如github，gitee（码云，原来的oschina），当然也可以不同步，只搭建一个hexo即可。</p>
<h3 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h3><h4 id="1-ubuntu-18-04"><a href="#1-ubuntu-18-04" class="headerlink" title="1 ubuntu 18.04"></a>1 ubuntu 18.04</h4><p>目前最新版本是ubuntu20.04，如果有安全隐患可以直接升级内核到最新版本。</p>
<h4 id="2-git安装"><a href="#2-git安装" class="headerlink" title="2 git安装"></a>2 git安装</h4><p>         sudo apt install git</p>
<h4 id="3-npm安装"><a href="#3-npm安装" class="headerlink" title="3 npm安装"></a>3 npm安装</h4><p>         sudo apt install npm</p>
<h4 id="4-nodejs安装"><a href="#4-nodejs安装" class="headerlink" title="4 nodejs安装"></a>4 nodejs安装</h4><p>ubuntu下可以直接安装nodejs，npm也可以安装，但是这两个管理nodejs版本都不方便，习惯了使用nvm，命令简单，安装nvm也很方便，先安装nvm. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash</span><br></pre></td></tr></table></figure>
<p>安装好nvm，目前最新版本0.38.0，然后安装node12.0.0版本，</p>
<pre><code>    nvm install 12.0.0
</code></pre>
<p>安装好后，同时npm也已经安装好了，默认版本v7.</p>
<h4 id="5-nginx安装和域名绑定"><a href="#5-nginx安装和域名绑定" class="headerlink" title="5 nginx安装和域名绑定"></a>5 nginx安装和域名绑定</h4><p>nginx是目前性能最高最好用的主流web服务器。安装方式一般有两种：apt命令安装和安装包下载安装。建议使用安装包安装，因为ubuntu下apt安装好后，nginx的启动文件、配置目录、静态目录和日志目录分别在4个系统目录下，记不住的话，以后维护的时候要找半天。<br>         但是此处只用来做博客系统，不会经常使用nginx，简单一句命令搞定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>
<p>目前配置文件地址： /etc/nginx/conf.d<br>新建一个配置文件：hexo.conf，名字随便取。<br>编辑配置文件： vi hexo.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  jk0520.com www.jk0520.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass              http://127.0.0.1:4000/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后进入nginx sbin目录启动nginx。</p>
<h4 id="5-github账号-https-github-com"><a href="#5-github账号-https-github-com" class="headerlink" title="5 github账号 https://github.com"></a>5 github账号 <a href="https://github.com/">https://github.com</a></h4><p>前往github注册一个账号。</p>
<h4 id="6-安装Hexo"><a href="#6-安装Hexo" class="headerlink" title="6 安装Hexo"></a>6 安装Hexo</h4><p>        npm install -g hexo</p>
<h3 id="二、建站"><a href="#二、建站" class="headerlink" title="二、建站"></a>二、建站</h3><h4 id="1-服务器上找个地方新建博客网站目录建站"><a href="#1-服务器上找个地方新建博客网站目录建站" class="headerlink" title="1 服务器上找个地方新建博客网站目录建站"></a>1 服务器上找个地方新建博客网站目录建站</h4><p>         mkdir hexo  #新建hexo文件夹目录<br>         cd hexo  #进入目录<br>         hexo init blog  #hexo初始化博客系统<br>         cd blog<br>         npm install<br>         nohup hexo s &amp;  # 后台挂起启动hexo<br>        <br>更多hexo配置信息请参考<a href="https://hexo.io/zh-cn/docs/setup">hexo中文官方文档</a></p>
<h4 id="2-博客可视化管理插件hexo-admin"><a href="#2-博客可视化管理插件hexo-admin" class="headerlink" title="2 博客可视化管理插件hexo-admin"></a>2 博客可视化管理插件hexo-admin</h4><p>因为hexo本身只有命令来新增文章，所以要添加hexo-admin插件来进行可视化管理。<br>在博客系统根目录下执行命令： </p>
<p>       npm install –save hexo-admin<br>然后重新启动hexo</p>
<p>       nohup hexo server -d &amp; </p>
<h5 id="配置admin管理页面密码保护"><a href="#配置admin管理页面密码保护" class="headerlink" title="配置admin管理页面密码保护"></a>配置admin管理页面密码保护</h5><p>打开网址 <a href="https://jk0520.com/admin">www.jk0520.com/admin</a>， 进入settings菜单页面，点击Setup authentification here输入用户名，密码，密钥，下面会自动生成配置文件，复制加在hexo根目录下的_config.yml中。重启hexo后，下次进入admin页面就需要登录了。</p>
<p><img src="/images/pasted-5.png" alt="upload successful"></p>
<h5 id="新增blog文章"><a href="#新增blog文章" class="headerlink" title="新增blog文章"></a>新增blog文章</h5><p><img src="/images/pasted-6.png" alt="upload successful"><br>进入admin页面，点击第一个菜单页面post，点击New Post就可以开始写个人的博客文章了。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
